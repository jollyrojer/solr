application:
  configuration:
    input.solr-version: "4.4.0"
    input.solr-collections: ["testone"]
    input.solr-shards-num: "2"
    input.solr-loglevel: "FINE"
    input.solr-zookeeper-loglevel: "INFO"
    input.app-port: "8080"
    input.exhibitor-port: "8090"
    input.solr-quantity: "4"
    input.zookeeper-quantity: "3"
    input.recipe-url: "https://raw.githubusercontent.com/loky9000/solr/master/solr-cookbooks.tar.gz"
    input.image: "us-east-1/ami-967edcff"
    input.identity: "ubuntu"
    input.instance-size: "m1.small"

  interfaces:
    input:
      #solr inputs
      solr-version: "bind(solr#input.solr-version)"
      solr-collections: "bind(solr#input.solr-collections)"
      solr-shards-num: "bind(solr#input.solr-shards-num)"
      solr-loglevel: "bind(solr#input.solr-loglevel)"
      solr-zookeeper-loglevel: "bind(solr#input.solr-zookeeper-loglevel)"
      #tomcat inputs
      app-port: "bind(tomcat#input.app-port, solr#input.solr-port)"
      solr-quantity: "bind(tomcat#input.quantity)"
      recipe-url: "bind(solr#input.recipe-url)"
      image: "bind(tomcat#input.image)"
      identity: "bind(tomcat#input.identity, solr#input.identity)"
      instance-size: "bind(tomcat#input.instance-size)"
      #zookeeper inputs
      exhibitor-port: "bind(zookeeper#input.exhibitor-port)"
      zookeeper-quantity: "bind(zookeeper#input.zookeeper-quantity)"
    endpoints:
      solr-node: "bind(solr#result.solr-node)"
      solr-url: "bind(solr#result.solr-url)"
    nodes:
      solr-hosts: "bind(tomcat#output.app-hosts)"
      solr-port: "bind(tomcat#output.app-port)"
      solr-zoo-nodes: "bind(solr#result.solr-zoo-nodes)"
      zoo-ui: "bind(zookeeper#output.zoo-ui)"

  components:
    tomcat:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Application Server"
      interfaces:
        input:
          app-port: configuration(string)
          quantity: configuration(string)
          image: configuration(string)
          identity: configuration(string)
          instance-size: configuration(string)
        management:
          reconfigure: receive-command(string java-opts)
          deploy-libs: receive-command(list<string> lib-uri)
          deploy-war: receive-command(string uri, string path, object context-attrs, object context-nodes)
          manage-service: receive-command(string service-action)
        output:
          app-hosts: publish-signal(list<string>)
          app-port: publish-signal(string)

    zookeeper:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Zookeeper"
      interfaces:
        input:
          exhibitor-port: configuration(string)
          zookeeper-quantity: configuration(string)
        output:
          zoo-nodes: publish-signal(list<string>)
          zoo-ui: publish-signal(list<string>)

    solr:
      type: workflow.Instance
      interfaces:
        input:
          identity: configuration(string)
          solr-port: configuration(string)
          solr-version: configuration(string)
          solr-collections: configuration(list<string>)
          solr-loglevel: configuration(string)
          solr-zookeeper-loglevel: configuration(string)
          solr-shards-num: configuration(string)
          recipe-url: configuration(string)
        app-nodes:
          app-hosts: consume-signal(list<string>)
          app-port: consume-signal(string)
        zoo:
          zoo-nodes: consume-signal(list<string>)
        tomcat-actions:
          manage-service: send-command(string service-action)
          reconfigure: send-command(string java-opts)
          deploy-libs: send-command(list<string> lib-uri)
          deploy-war: send-command(string uri, string path, object context-attrs, object context-nodes)          
        result:
          solr-url: publish-signal(list<string>)
          solr-node: publish-signal(list<string>)
          solr-zoo-nodes: publish-signal(string)

      required: [app-nodes, zoo, tomcat-actions]

      configuration:
        configuration.triggers:
          input.solr-collections: manage-collection
          
        configuration.propagateStatus: [ manage-collection ]
        configuration.workflows:
          launch:
            parameters:
              - solr-port:
                  description: Solr app port
              - solr-version:
                  description: Solr version
              - solr-collections:
                  description: Solr collection names
              - solr-loglevel:
                  description: Solr debug level
              - solr-zookeeper-loglevel:
                  description: Solr zookeeper debug level
              - solr-shards-num:
                  description: "Number os solr shards"
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    props: result
              - provision-node:
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: default
                    hardwareId: ""
                    vmIdentity: "{$.identity}"
                    retryCount: 0
                    staticIps: "{$.props.app-nodes.app-hosts}"
              - reconfigure-tomcat:
                  action: serviceCall
                  phase: reconfigure-tomcat
                  precedingPhases: [get-env-props]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: reconfigure
                    arguments:
                      java-opts: "$${{JAVA_OPTS}} -DnumShards={$.solr-shards-num} -Dlog4j.configuration=file:///opt/solr/webapps/log4j.properties"
              - deploy-solr:
                  action: "chefrun"
                  phase: deploy-solr
                  precedingPhases: [ reconfigure-tomcat ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[solr]" ]
                    recipeUrl: "{$.recipe-url}" 
                    jattrs:
                      solr:
                        port: "{$.solr-port}"
                        hostcontext: "solr"
                        version: "{$.solr-version}"
                        loglevel: "{$.solr-loglevel}"
                        zookeeper:
                          loglevel: "{$.solr-zookeeper-loglevel}"
                  output:
                    chefAttrs: chefState
              - create-collections:
                  action: "chefrun"
                  phase: create-collections
                  precedingPhases: [ deploy-solr ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[solr::create_collection]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      solr:
                        version: "{$.solr-version}"
                        port: "{$.solr-port}"
                        hostcontext: "solr"
                        collection: "{$.solr-collections}"
                        zookeeper:
                          hosts: "{$.props.zoo.zoo-nodes}"
                  output:
                     chefAttrs1: chefState
              - deploy-libs:
                  action: serviceCall
                  phase: deploy-libs
                  precedingPhases: [ deploy-solr ]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: deploy-libs
                    arguments:
                      lib-uri: "{$.chefAttrs['*'][0]['solr']['lib_uri']}"
              - deploy-war:
                  action: serviceCall
                  phase: deploy-war
                  precedingPhases: [ deploy-libs ]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: deploy-war
                    arguments:
                      uri: "file://{$.chefAttrs['*'][0]['solr']['war_uri']}"
                      path: "/solr"
                      context-attrs: {
                        "docBase": "{$.chefAttrs['*'][0]['solr']['war_uri']}",
                        "debug": "5",
                        "crossContext": "true",
                        "privileged": "true",
                        "allowLinking": "true"
                      }
                      context-nodes:
                        - Environment: {
                            "name": "solr/home",
                            "type": "java.lang.String",
                            "value": "/opt/solr/cores",
                            "override": "true"
                          }

            return:
              solr-node:
                value: "{$.props.app-nodes.app-hosts}"
              solr-url:
                value: "http://{$.props.app-nodes.app-hosts}:{$.props.app-nodes.app-port}/solr"
              solr-zoo-nodes:
                value: "{$.chefAttrs1['*'][0].['solr']['zookeeper']['nodes']}"

          manage-collection:
            parameters:
              - solr-collections:
                  description: "Solr collection names"
            steps:
              - stop-service-tomcat:
                  action: serviceCall
                  phase: stop-service-tomcat
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: manage-service
                    arguments:
                      service-action: "stop"
              - delete-collection:
                  action: "chefrun"
                  phase: "delete-collection"
                  precedingPhases: ["stop-service-tomcat"]
                  parameters:
                    isSolo: true
                    roles: ["default"]
                    runList: ["recipe[solr::delete_collection]"]
                    recipeUrl: "{$.recipe-url}"
              - create-collections:
                  action: "chefrun"
                  phase: create-collections
                  precedingPhases: ["delete-collection"]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[solr::create_collection]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      solr:
                        version: "{$.solr-version}"
                        port: "{$.solr-port}"
                        hostcontext: "solr"
                        collection: "{$.solr-collections}"
                        zookeeper:
                          hosts: "{$.props.zoo.zoo-nodes}"
              - start-service-tomcat:
                  action: serviceCall
                  phase: start-service-tomcat
                  precedingPhases: ["create-collections"]
                  parameters:
                    timeout: 600
                    service: tomcat-actions
                    command: manage-service
                    arguments:
                      service-action: "start"


          destroy:
            steps: []
  bindings:
    - [solr, tomcat]
    - [solr, zookeeper]
